#ifndef READER_H
#define READER_H

#include "data_structure.h"
#include "global.h"
#include <ctime>

class Macro;
class Component;
class SiteMap;

using namespace std;

class LefDataBase : public LefParser::LefDataBase{
	public:
		typedef LefParser::LefDataBase base_type;

		LefDataBase() : base_type(){}
		virtual void lef_version_cbk(string const& v){}
		virtual void lef_version_cbk(double v){}
		virtual void lef_dividerchar_cbk(string const& v){} 
		virtual void lef_units_cbk(LefParser::lefiUnits const& v){}
		virtual void lef_manufacturing_cbk(double v){}
		virtual void lef_busbitchars_cbk(string const& v){}
		virtual void lef_layer_cbk(LefParser::lefiLayer const& v){}
		virtual void lef_via_cbk(LefParser::lefiVia const& v){}
		virtual void lef_viarule_cbk(LefParser::lefiViaRule const& v){}
		virtual void lef_spacing_cbk(LefParser::lefiSpacing const& v){}
		virtual void lef_site_cbk(LefParser::lefiSite const& v){}
		virtual void lef_macrobegin_cbk(std::string const& v){}
		
		virtual void lef_macro_cbk(LefParser::lefiMacro const& v){
			if(bottom_vss>bottom_vdd)
				bottom=true;
			else
				bottom=false;
			Macro new_macro(v.sizeX(), v.sizeY(), bottom);
			macro_list.insert( pair<string, Macro>(v.name(),new_macro) );
		}

		virtual void lef_prop_cbk(LefParser::lefiProp const& v){}
		virtual void lef_maxstackvia_cbk(LefParser::lefiMaxStackVia const& v){}
		virtual void lef_obstruction_cbk(LefParser::lefiObstruction const& v){}
		virtual void lef_pin_cbk(lefiPin const& v){
			bool is_vss=false;
			bool is_vdd=false;
			if(strcmp(v.name(),"vss")==0)
				is_vss=true;

			if(strcmp(v.name(),"vdd")==0)
				is_vdd=true;
	
			if((is_vss) or (is_vdd)){
				lefiGeometries  *g=v.port(0);
				lefiGeomRect *rect;	
			    	for (int i = 0; i < g->numItems(); i++) {
					if(g->itemType(i)==lefiGeomRectE){
						rect = g->getRect(i);
						if (!(rect->colorMask)) {
							//cout<<"Rect "<<rect->xl<<", "<<rect->yl<<", "<<rect->xh<<", "<<rect->yh<<endl;
							if (is_vss)								
								bottom_vss=rect->yl;
							else if (is_vdd)
								bottom_vdd=rect->yl;
						}
					}
				}
			}
		}
	private:
		double bottom_vss;
		double bottom_vdd;
		bool bottom;
};

class DefDataBase : public DefParser::DefDataBase{
	public:
		DefDataBase(){
			component_id=0;		
		}
		virtual void set_def_dividerchar(string const& token){}
		virtual void set_def_busbitchars(string const& token){}
		virtual void set_def_version(string const& token){}
		virtual void set_def_design(string const& token){}
		virtual void set_def_unit(int token){}
		virtual void set_def_diearea(int t1, int t2, int t3, int t4){}
		virtual void add_def_row(DefParser::Row const& r){
			if(site_map.get_num_row()==0){
				site_map.set_num_col(r.repeat[0]);		
				site_map.set_col_w(r.step[0]/1000.0);
			}
			site_map.inc_num_row();
			if(site_map.get_num_row()==2){
				site_map.set_row_h(r.origin[1]/1000.0);			
			}
		}

		virtual void add_def_component(DefParser::Component const& c){
			Component new_component(c, component_id);
			component_id++;		
			component_list.push_back(new_component);
		}

		virtual void resize_def_component(int token){}
		virtual void add_def_pin(DefParser::Pin const& p){}
		virtual void resize_def_pin(int token){}
		virtual void add_def_net(DefParser::Net const& n){}
		virtual void resize_def_net(int token){}
		virtual void resize_def_blockage(int n){}
		virtual void add_def_placement_blockage(std::vector<std::vector<int> > const& vBbox){}
		virtual void end_def_design(){}
	private:
		int component_id;
};

#endif
